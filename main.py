import os
import sqlite3

from PIL import Image
import io
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import Bot
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ParseMode
from aiogram import types
from aiogram.types import  ReplyKeyboardMarkup, KeyboardButton
from menu import *
from function import *
from pentafoil_chart import *
from answer_values_for_test import *


bot = Bot(token='YOUR TOKEN')
dp = Dispatcher(bot)
conn = sqlite3.connect('db/test.db', check_same_thread=False)
start_photo = 'start_photo.png'

cursor = conn.cursor()
users = []
ar = []
answers = ["-3", "-2", "-1", "0", "1", "2", "3"]

NEXT_BUTTON_TEXT = "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"

def get_menu_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    next_button = InlineKeyboardButton(text=NEXT_BUTTON_TEXT, callback_data="next")
    # analysis_button = InlineKeyboardButton(text=MENU_ANALYSIS_BUTTON_TEXT, callback_data="analysis")
    keyboard.add(next_button)
    # keyboard.add(next_button, analysis_button)
    return keyboard

async def db_table_val(user_id: int, user_name: str, user_surname: str, username: str):
    try:
        cursor.execute('INSERT INTO test (user_id, user_name, user_surname, username) VALUES (?, ?, ?, ?)',
                       (user_id, user_name, user_surname, username))
        conn.commit()
    except:
        cursor.execute(
            'UPDATE test SET question1 = ? , question2 = ?, question3 = ?, question4 = ?, question5 = ?,'
            ' question6 = ? , question7 = ?, question8 = ?, question9 = ?, dominant_emotion = ?, feedback = ? WHERE user_id = ?;',
            (100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, user_id))
        conn.commit()


@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    # –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    with open("start_photo.png", "rb") as file:
        photo = io.BytesIO(file.read())

    # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    kb = [[types.KeyboardButton(text="–í–ø–µ—Ä—ë–¥!")]]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb,
                                         resize_keyboard=True)

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer_photo(photo, caption="–ù–∞ —Å–≤—è–∑–∏ –ø—Ä–æ–µ–∫—Ç <b>Food Mood!</b>\n\n"
                                                "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ <i>–µ–¥—ã –∏ –µ—ë –≤–ª–∏—è–Ω–∏—è –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞.</i>\n\n"
                                                "–î–ª—è –í–∞—Å –º—ã:\n"
                                                "üîπ –†–∞–∑–±–µ—Ä–µ–º —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥;\n"
                                                "üîπ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏ —Ö–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥;\n"
                                                "üîπ –ü–æ—Å–æ–≤–µ—Ç—É–µ–º –í–∞–º –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω—É–∂–Ω—ã–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –í–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã;\n\n"
                                                "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ —É–∑–Ω–∞–µ–º –í–∞—à–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n\n"
                                                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´<b>–í–ø–µ—Ä—ë–¥</b>¬ª –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å\n\n"
                                                "<i>–¢–µ—Å—Ç –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ–Ω—å—à–µ 2-—É—Ö –º–∏–Ω—É—Ç</i>",
                                reply_markup=keyboard, parse_mode=ParseMode.HTML)



# Create a reply keyboard with buttons for each answer choice
test_buttons1 = ReplyKeyboardMarkup(resize_keyboard=True)
for answer in answer_values_q1.keys():
    button = KeyboardButton(answer)
    test_buttons1.add(button)

test_buttons2 = ReplyKeyboardMarkup(resize_keyboard=True)
for answer in answer_values_q2.keys():
    button = KeyboardButton(answer)
    test_buttons2.add(button)

test_buttons3 = ReplyKeyboardMarkup(resize_keyboard=True)
for answer in answer_values_q3.keys():
    button = KeyboardButton(answer)
    test_buttons3.add(button)

test_buttons4 = ReplyKeyboardMarkup(resize_keyboard=True)
for answer in answer_values_q4.keys():
    button = KeyboardButton(answer)
    test_buttons4.add(button)

test_buttons5 = ReplyKeyboardMarkup(resize_keyboard=True)
for answer in answer_values_q5.keys():
    button = KeyboardButton(answer)
    test_buttons5.add(button)

test_buttons6 = ReplyKeyboardMarkup(resize_keyboard=True)
for answer in answer_values_q6.keys():
    button = KeyboardButton(answer)
    test_buttons6.add(button)

test_buttons7 = ReplyKeyboardMarkup(resize_keyboard=True)
for answer in answer_values_q7.keys():
    button = KeyboardButton(answer)
    test_buttons7.add(button)

test_buttons8 = ReplyKeyboardMarkup(resize_keyboard=True)
for answer in answer_values_q8.keys():
    button = KeyboardButton(answer)
    test_buttons8.add(button)

test_buttons9 = ReplyKeyboardMarkup(resize_keyboard=True)
for answer in answer_values_q9.keys():
    button = KeyboardButton(answer)
    test_buttons9.add(button)



@dp.message_handler(lambda message: message.text == "–í–ø–µ—Ä—ë–¥!")
async def choose(message: types.Message):
    # Get user info and insert into database
    us_id = message.from_user.id
    us_name = message.from_user.first_name
    us_sname = message.from_user.last_name
    username = message.from_user.username
    await db_table_val(user_id=us_id, user_name=us_name, user_surname=us_sname, username=username)

    # Ask the first question with the reply keyboard
    await message.answer(text="–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –í—ã —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?", reply_markup=test_buttons1)


# Handler for when the user selects an answer to question 1
@dp.message_handler(lambda message: message.text in answer_values_q1.keys())
async def process_q1_answer(message: types.Message):

    # Extract the answer value from the answer text
    answer_value = answer_values_q1[message.text]

    # Update the database with the user's answer
    user_id = message.from_user.id
    conn.execute("UPDATE test SET question1=? WHERE user_id=?", (answer_value, user_id))
    conn.commit()

    # Show the next question
    await message.answer(text="–ü—Ä–µ—Å–ª–µ–¥—É—é—Ç –ª–∏ –í–∞—Å —Å–µ–≥–æ–¥–Ω—è –Ω–∞–≤—è–∑—á–∏–≤—ã–µ –º—ã—Å–ª–∏?", reply_markup=test_buttons2)

# Handler for when the user selects an answer to question 1
@dp.message_handler(lambda message: message.text in answer_values_q2.keys())
async def process_q2_answer(message: types.Message):
    # Extract the answer value from the answer text
    answer_value = answer_values_q2[message.text]

    # Update the database with the user's answer
    user_id = message.from_user.id
    conn.execute("UPDATE test SET question2=? WHERE user_id=?", (answer_value, user_id))
    conn.commit()

    # Show the next question
    await message.answer(text="–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –í—ã —á–∞—â–µ –∑–ª–∏—Ç–µ—Å—å –∏–ª–∏ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç–µ—Å—å?", reply_markup=test_buttons3)

# Handler for when the user selects an answer to question 1
@dp.message_handler(lambda message: message.text in answer_values_q3.keys())
async def process_q3_answer(message: types.Message):
    # Extract the answer value from the answer text
    answer_value = answer_values_q3[message.text]

    # Update the database with the user's answer
    user_id = message.from_user.id
    conn.execute("UPDATE test SET question3=? WHERE user_id=?", (answer_value, user_id))
    conn.commit()

    # Show the next question
    await message.answer(text="–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã –ª–∏ –í—ã —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω—ë–º?", reply_markup=test_buttons4)

# Handler for when the user selects an answer to question 1
@dp.message_handler(lambda message: message.text in answer_values_q4.keys())
async def process_q4_answer(message: types.Message):
    # Extract the answer value from the answer text
    answer_value = answer_values_q4[message.text]

    # Update the database with the user's answer
    user_id = message.from_user.id
    conn.execute("UPDATE test SET question4=? WHERE user_id=?", (answer_value, user_id))
    conn.commit()

    # Show the next question
    await message.answer(text="–õ–µ–≥–∫–æ –ª–∏ –±—ã–ª–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è?", reply_markup=test_buttons5)

# Handler for when the user selects an answer to question 1
@dp.message_handler(lambda message: message.text in answer_values_q5.keys())
async def process_q5_answer(message: types.Message):
    # Extract the answer value from the answer text
    answer_value = answer_values_q5[message.text]

    # Update the database with the user's answer
    user_id = message.from_user.id
    conn.execute("UPDATE test SET question5=? WHERE user_id=?", (answer_value, user_id))
    conn.commit()

    # Show the next question
    await message.answer(text="–†–∞–¥—É—é—Ç –ª–∏ –í–∞—Å —Å–µ–≥–æ–¥–Ω—è –æ–∫—Ä—É–∂–∞—é—â–∏–µ –ª—é–¥–∏?", reply_markup=test_buttons6)

# Handler for when the user selects an answer to question 1
@dp.message_handler(lambda message: message.text in answer_values_q6.keys())
async def process_q6_answer(message: types.Message):
    # Extract the answer value from the answer text
    answer_value = answer_values_q6[message.text]

    # Update the database with the user's answer
    user_id = message.from_user.id
    conn.execute("UPDATE test SET question6=? WHERE user_id=?", (answer_value, user_id))
    conn.commit()

    # Show the next question
    await message.answer(text="–ö–∞–∫ –±—ã –í—ã –ø—Ä–æ–≤–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, –µ—Å–ª–∏ –±—ã –±—ã–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã–º?", reply_markup=test_buttons7)

# Handler for when the user selects an answer to question 1
@dp.message_handler(lambda message: message.text in answer_values_q7.keys())
async def process_q7_answer(message: types.Message):
    # Extract the answer value from the answer text
    answer_value = answer_values_q7[message.text]

    # Update the database with the user's answer
    user_id = message.from_user.id
    conn.execute("UPDATE test SET question7=? WHERE user_id=?", (answer_value, user_id))
    conn.commit()

    # Show the next question
    await message.answer(text="–£–≤–µ—Ä–µ–Ω—ã –ª–∏ –í—ã –≤ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º –¥–Ω–µ?", reply_markup=test_buttons8)

# Handler for when the user selects an answer to question 1
@dp.message_handler(lambda message: message.text in answer_values_q8.keys())
async def process_q8_answer(message: types.Message):
    # Extract the answer value from the answer text
    answer_value = answer_values_q8[message.text]

    # Update the database with the user's answer
    user_id = message.from_user.id
    conn.execute("UPDATE test SET question8=? WHERE user_id=?", (answer_value, user_id))
    conn.commit()

    # Show the next question
    await message.answer(text="–í—ã –æ—â—É—â–∞–µ—Ç–µ —Å–µ–±—è —Å—á–∞—Å—Ç–ª–∏–≤—ã–º?", reply_markup=test_buttons9)

@dp.message_handler(lambda message: message.text in answer_values_q9.keys())
async def process_q9_answer(message: types.Message):
    # Extract the answer value from the answer text
    answer_value = answer_values_q9[message.text]

    # Update the database with the user's answer
    user_id = message.from_user.id
    conn.execute("UPDATE test SET question9=? WHERE user_id=?", (answer_value, user_id))
    conn.commit()

    # Ask the user if they want to get the graph
    kb = [[types.KeyboardButton(text="–î–∞–ª–µ–µ!")]]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞, –Ω–∞–∂–º–∏—Ç–µ <b>–î–∞–ª–µ–µ!</b>", parse_mode=ParseMode.HTML,
                         reply_markup=keyboard, )

# Handler for when the user wants to see the graph
@dp.message_handler(lambda message: "–î–∞–ª–µ–µ!" in message.text)
async def send_graph(message: types.Message):
    us_id = message.from_user.id

    # Retrieve the user's answers from the database
    cursor.execute("SELECT question1, question2, question3, question4, question5, question6, question7, "
                   "question8, question9 FROM test WHERE user_id = ?;", (us_id,))
    row = cursor.fetchone()
    if row:
        a = list(row)
    else:
        a = []

    # Calculate the dominant emotion and draw the graph
    result_pechal, result_strax, result_gnev, result_schaste, result_chill = the_sum_of_net_indicators(a)
    max_val = max(result_pechal, result_strax, result_gnev, result_schaste, result_chill)
    if max_val == result_pechal:
        dom_emotion = "–ü–µ—á–∞–ª—å"
    elif max_val == result_strax:
        dom_emotion = "–°—Ç—Ä–∞—Ö"
    elif max_val == result_gnev:
        dom_emotion = "–ì–Ω–µ–≤"
    elif max_val == result_schaste:
        dom_emotion = "–°—á–∞—Å—Ç—å–µ"
    else:
        dom_emotion = "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"
    if [result_pechal, result_schaste].count(max_val) > 1:
        dom_emotion = "–ü–µ—á–∞–ª—å –∏ –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"

    draw_graph([result_pechal, result_strax, result_gnev, result_schaste, result_chill])
    photo = open('foo.png', 'rb')
    await bot.send_photo(message.from_user.id, photo)
    os.remove('foo.png')

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='No'))
    await bot.send_message(message.from_user.id, f"–ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –í–∞—à–∞ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è ‚Äì <b>{dom_emotion}</b>",
                           reply_markup=keyboard, parse_mode=ParseMode.HTML)

    @dp.callback_query_handler(lambda c: c.data in ['Yes', 'No'])
    async def process_callback_data(callback_query: types.CallbackQuery):
        user_id = callback_query.from_user.id
        if callback_query.data == 'No':
            custom_keyboard = types.InlineKeyboardMarkup()
            custom_keyboard.add(types.InlineKeyboardButton(text='–ü–µ—á–∞–ª—å', callback_data='–ü–µ—á–∞–ª—å'),
                                types.InlineKeyboardButton(text='–°—Ç—Ä–∞—Ö', callback_data='–°—Ç—Ä–∞—Ö'),
                                types.InlineKeyboardButton(text='–ì–Ω–µ–≤', callback_data='–ì–Ω–µ–≤'),
                                types.InlineKeyboardButton(text='–°—á–∞—Å—Ç—å–µ', callback_data='–°—á–∞—Å—Ç—å–µ'),
                                types.InlineKeyboardButton(text='–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', callback_data='–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ'))
            await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —ç–º–æ—Ü–∏—é:",
                                   reply_markup=custom_keyboard)
            conn.commit()


            @dp.callback_query_handler(lambda c: c.data in ['–ü–µ—á–∞–ª—å', '–°—Ç—Ä–∞—Ö', '–ì–Ω–µ–≤', '–°—á–∞—Å—Ç—å–µ', '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ'])
            async def process_callback_data(callback_query: types.CallbackQuery):
                cursor.execute(
                    f"UPDATE test SET dominant_emotion = '{callback_query.data.capitalize()}' WHERE user_id = {callback_query.from_user.id}")

                await bot.send_message(callback_query.from_user.id,
                                       "–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –í–∞—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –ê—Ä—Ç–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –º–µ–Ω—é:")
                conn.commit()
                if callback_query.data == '–ü–µ—á–∞–ª—å':
                    await bot.send_message(callback_query.from_user.id, pechal_menu, parse_mode=ParseMode.HTML,
                                           reply_markup=get_menu_keyboard())
                elif callback_query.data == '–°—Ç—Ä–∞—Ö':
                    await bot.send_message(callback_query.from_user.id, strax_menu, parse_mode=ParseMode.HTML,
                                           reply_markup=get_menu_keyboard())
                elif callback_query.data == '–ì–Ω–µ–≤':
                    await bot.send_message(callback_query.from_user.id, gnev_menu, parse_mode=ParseMode.HTML,
                                           reply_markup=get_menu_keyboard())
                elif callback_query.data == '–°—á–∞—Å—Ç—å–µ':
                    await bot.send_message(callback_query.from_user.id, schaste_menu, parse_mode=ParseMode.HTML,
                                           reply_markup=get_menu_keyboard())
                elif callback_query.data == '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ':
                    await bot.send_message(callback_query.from_user.id, chill_menu, parse_mode=ParseMode.HTML,
                                           reply_markup=get_menu_keyboard())


    @dp.callback_query_handler(lambda c: c.data in ['next', 'analysis'])
    async def process_menu_callback(callback_query: types.CallbackQuery):
        if callback_query.data == 'next':
            # –ï—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ", –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
            await bot.send_message(callback_query.from_user.id, "‚úçÔ∏è –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ª–∏ –í—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞?\n"
                                                                "‚úçÔ∏è –£–ª—É—á—à–∏–ª–æ—Å—å –ª–∏ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏?\n\n"
                                                                "–í–∞—à –æ—Ç–∑—ã–≤ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ü•∫")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–∑—ã–≤–æ–º
    @dp.message_handler()
    async def process_feedback(message: types.Message):
        cursor.execute(
            f"UPDATE test SET feedback = '{message.text}' WHERE user_id = {message.from_user.id}")
        await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üëê\n"
                                                     "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ —Ç–µ—Å—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ /start")
        conn.commit()




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)





# @dp.message_handler(lambda message: "–î–∞–ª–µ–µ!" in message.text)
# async def send_graph(message: types.Message):
#     us_id = message.from_user.id
#
#     cursor.execute("SELECT question1, question2, question3, question4, question5, question6, question7, "
#                    "question8, question9 FROM test WHERE user_id = ?;", (us_id,))
#     row = cursor.fetchone()
#     if row:
#         a = list(row)
#         print(type(a), a)
#     else:
#         a = []
#
#     result_pechal, result_strax, result_gnev, result_schaste, result_chill = the_sum_of_net_indicators(a)
#     max_val = max(result_pechal, result_strax, result_gnev, result_schaste, result_chill)
#     if max_val == result_pechal:
#         dom_emotion = "–ü–µ—á–∞–ª—å"
#     elif max_val == result_strax:
#         dom_emotion = "–°—Ç—Ä–∞—Ö"
#     elif max_val == result_gnev:
#         dom_emotion = "–ì–Ω–µ–≤"
#     elif max_val == result_schaste:
#         dom_emotion = "–°—á–∞—Å—Ç—å–µ"
#     else:
#         dom_emotion = "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"
#     if [result_pechal, result_schaste].count(max_val) > 1:
#         dom_emotion = "–ü–µ—á–∞–ª—å –∏ –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"
#
#     draw_graph([result_pechal, result_strax, result_gnev, result_schaste, result_chill])
#     photo = open('foo.png', 'rb')
#     await bot.send_photo(message.from_user.id, photo)
#     os.remove('foo.png')
#
#
#     keyboard = types.InlineKeyboardMarkup()
#     keyboard.add(types.InlineKeyboardButton(text='–î–∞', callback_data='Yes'),
#                  types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='No'))
#     await bot.send_message(message.from_user.id, f"–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã, —á—Ç–æ –í–∞—à–∞ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è ‚Äì {dom_emotion}?",
#                            reply_markup=keyboard)
#
#     @dp.callback_query_handler(lambda c: c.data in ['Yes', 'No'])
#     async def process_callback_data(callback_query: types.CallbackQuery):
#         if callback_query.data == 'Yes':
#             cursor.execute(
#                 f"UPDATE test SET dominant_emotion = '{dom_emotion}' WHERE user_id = {callback_query.from_user.id}")
#             await bot.send_message(callback_query.from_user.id, "–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –í–∞—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –ê—Ä—Ç–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –º–µ–Ω—é:")
#
#             if dom_emotion == '–ü–µ—á–∞–ª—å':
#                 await bot.send_message(callback_query.from_user.id, pechal_menu, parse_mode=ParseMode.HTML,
#                                        reply_markup=get_menu_keyboard())
#             elif dom_emotion == '–°—Ç—Ä–∞—Ö':
#                 await bot.send_message(callback_query.from_user.id, strax_menu, parse_mode=ParseMode.HTML,
#                                        reply_markup=get_menu_keyboard())
#             elif dom_emotion == '–ì–Ω–µ–≤':
#                 await bot.send_message(callback_query.from_user.id, gnev_menu, parse_mode=ParseMode.HTML,
#                                        reply_markup=get_menu_keyboard())
#             elif dom_emotion == '–°—á–∞—Å—Ç—å–µ':
#                 await bot.send_message(callback_query.from_user.id, schaste_menu, parse_mode=ParseMode.HTML,
#                                        reply_markup=get_menu_keyboard())
#             elif dom_emotion == '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ':
#                 await bot.send_message(callback_query.from_user.id, chill_menu, parse_mode=ParseMode.HTML,
#                                        reply_markup=get_menu_keyboard())
#
#
#         else:
#             custom_keyboard = types.InlineKeyboardMarkup()
#             custom_keyboard.add(types.InlineKeyboardButton(text='–ü–µ—á–∞–ª—å', callback_data='–ü–µ—á–∞–ª—å'),
#                                 types.InlineKeyboardButton(text='–°—Ç—Ä–∞—Ö', callback_data='–°—Ç—Ä–∞—Ö'),
#                                 types.InlineKeyboardButton(text='–ì–Ω–µ–≤', callback_data='–ì–Ω–µ–≤'),
#                                 types.InlineKeyboardButton(text='–°—á–∞—Å—Ç—å–µ', callback_data='–°—á–∞—Å—Ç—å–µ'),
#                                 types.InlineKeyboardButton(text='–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', callback_data='–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ'))
#             await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —ç–º–æ—Ü–∏—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ:",
#                                    reply_markup=custom_keyboard)
#             conn.commit()
#
#
#         @dp.callback_query_handler(lambda c: c.data in ['–ü–µ—á–∞–ª—å', '–°—Ç—Ä–∞—Ö', '–ì–Ω–µ–≤', '–°—á–∞—Å—Ç—å–µ', '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ'])
#         async def process_callback_data(callback_query: types.CallbackQuery):
#             cursor.execute(
#                 f"UPDATE test SET dominant_emotion = '{callback_query.data.capitalize()}' WHERE user_id = {callback_query.from_user.id}")
#             await bot.send_message(callback_query.from_user.id,
#                                    "–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –í–∞—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –ê—Ä—Ç–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –º–µ–Ω—é:")
#             conn.commit()
#             if callback_query.data == '–ü–µ—á–∞–ª—å':
#                 await bot.send_message(callback_query.from_user.id, pechal_menu, parse_mode=ParseMode.HTML,
#                                        reply_markup=get_menu_keyboard())
#             elif callback_query.data == '–°—Ç—Ä–∞—Ö':
#                 await bot.send_message(callback_query.from_user.id, strax_menu, parse_mode=ParseMode.HTML,
#                                        reply_markup=get_menu_keyboard())
#             elif callback_query.data == '–ì–Ω–µ–≤':
#                 await bot.send_message(callback_query.from_user.id, gnev_menu, parse_mode=ParseMode.HTML,
#                                        reply_markup=get_menu_keyboard())
#             elif callback_query.data == '–°—á–∞—Å—Ç—å–µ':
#                 await bot.send_message(callback_query.from_user.id, schaste_menu, parse_mode=ParseMode.HTML,
#                                        reply_markup=get_menu_keyboard())
#             elif callback_query.data == '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ':
#                 await bot.send_message(callback_query.from_user.id, chill_menu, parse_mode=ParseMode.HTML,
#                                        reply_markup=get_menu_keyboard())
#
#
#         @dp.callback_query_handler(lambda c: c.data in ['next', 'analysis'])
#         async def process_menu_callback(callback_query: types.CallbackQuery):
#             if callback_query.data == 'next':
#                 # –ï—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ", –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
#                 await bot.send_message(callback_query.from_user.id, "–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ª–∏ –í—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞?\n"
#                                                                     "–£–ª—É—á—à–∏–ª–æ—Å—å –ª–∏ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏?\n\n"
#                                                                     "–í–∞—à –æ—Ç–∑—ã–≤ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ü•∫")
#
#                 # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–∑—ã–≤–æ–º
#                 @dp.message_handler()
#                 async def process_feedback(message: types.Message):
#                     cursor.execute(
#                         f"UPDATE test SET feedback = '{message.text}' WHERE user_id = {message.from_user.id}")
#                     await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üëê\n"
#                                                                  "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ —Ç–µ—Å—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ /start")
#                     conn.commit()
    #
    # if callback_query.data == 'analysis':
    #     # –ï—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–†–∞–∑–±–æ—Ä –º–µ–Ω—é", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω—é
    #     message_text = callback_query.message.text
    #     if message_text == pechal_menu:
    #         await bot.send_message(callback_query.from_user.id, pechal_menu_description)
    #     elif message_text == strax_menu:
    #         await bot.send_message(callback_query.from_user.id, strax_menu_description)
    #     elif message_text == gnev_menu:
    #         await bot.send_message(callback_query.from_user.id, gnev_menu_description)
    #     elif message_text == schaste_menu:
    #         await bot.send_message(callback_query.from_user.id, schaste_menu_description)
    #     elif message_text == chill_menu:
    #         await bot.send_message(callback_query.from_user.id, chill_menu_description)
    #     await bot.send_message(callback_query.from_user.id, "–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –æ—Ç–∑—ã–≤:")
    #
    #     # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–∑—ã–≤–æ–º
    #     @dp.message_handler()
    #     async def process_feedback(message: types.Message):
    #         cursor.execute(
    #             f"UPDATE test SET feedback = '{message.text}' WHERE user_id = {message.from_user.id}")
    #         await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!\n"
    #                                                      "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ —Ç–µ—Å—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ /start")
    #         conn.commit()



# if __name__ == '__main__':
#     while True:
#         try:
#             executor.start_polling(dp, skip_updates=True)
#         except Exception as e:
#             print(f'Error: {e}')
#             time.sleep(5)


